AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ocr-service-stg

  Sample SAM Template for ocr-service stage deployment

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tracing: Active
 
  Api:
    TracingEnabled: true
    BinaryMediaTypes:
      - '*/*'
    MethodSettings: 
      - LoggingLevel: INFO
        MetricsEnabled: True
        DataTraceEnabled: True
        ResourcePath: "/*"
        HttpMethod: "*"

Parameters:
  Stage:
    Type: String
    Default: stg
    Description: "Deployment stage"

  CustomDomain:
    Type: String
    Default: ocr-stg
    Description: "Custom domain for Cognito user pool"
  
  S3BUCKETNAME:
    Type: String
    Default: eazeitocrdocuments-stg
  
  REGION:
    Type: String
    Default: us-east-2

Resources:

  # OCRStageUserPool:
  #   Type: 'AWS::Cognito::UserPool'
  #   Properties:
  #     UserPoolName: ocr-stage-user-pool
  #     AutoVerifiedAttributes:
  #       - email

  # OCRStageUserPoolResourceServer:
  #   Type: 'AWS::Cognito::UserPoolResourceServer'
  #   Properties:
  #     UserPoolId: !Ref OCRStageUserPool
  #     Identifier: ocr-service-stg
  #     Name: OCR Service Resource Server
  #     Scopes:
  #       - ScopeName: ocr.analyze
  #         ScopeDescription: Analyze documents
          
  # OCRStageUserPoolClient:
  #   Type: 'AWS::Cognito::UserPoolClient'
  #   DependsOn: OCRStageUserPool  # Ensure UserPool is created first
  #   Properties:
  #     ClientName: stg-client
  #     UserPoolId: !Ref OCRStageUserPool
  #     GenerateSecret: true
  #     AllowedOAuthFlows:
  #       - client_credentials
  #     AllowedOAuthFlowsUserPoolClient: true
  #     AllowedOAuthScopes:
  #       - ocr-service-stg/ocr.analyze  # Custom scope for document analysis
  #     ExplicitAuthFlows:
  #       - ALLOW_REFRESH_TOKEN_AUTH
  #       - ALLOW_USER_SRP_AUTH
  #     AccessTokenValidity: 60 # 60 minutes
  #     IdTokenValidity: 60 # 60 minutes
  #     RefreshTokenValidity: 30 # 30 days
  #     TokenValidityUnits:
  #       AccessToken: minutes
  #       IdToken: minutes
  #       RefreshToken: days
  #     CallbackURLs:
  #       - https://yestechforce.com/callback  # Replace with your actual callback URL



  # OCRStageUserPoolDomain:
  #   Type: 'AWS::Cognito::UserPoolDomain'
  #   Properties:
  #     Domain: !Ref CustomDomain
  #     UserPoolId: !Ref OCRStageUserPool
      
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaTextractAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'textract:DetectDocumentText'
                  - 'textract:AnalyzeDocument'
                  - 'textract:StartDocumentTextDetection'
                  - 'textract:GetDocumentTextDetection'
                  - 'textract:StartDocumentAnalysis'
                  - 'textract:GetDocumentAnalysis'
                  - 'textract:AnalyzeExpense'
                  - 'textract:AmazonTextractFullAccess'
                  - 'textract:AnalyzeID'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
        - 'arn:aws:iam::aws:policy/ComprehendFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'

  OCRFunctionStg:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ocr/
      Policies: 
        - CloudWatchLogsFullAccess
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Timeout: 60
      PackageType: Zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          STAGE: !Ref Stage
          S3_BUCKET_NAME: !Ref S3BUCKETNAME
          REGION: !Ref REGION
      Architectures:
        - x86_64
      Events:
        OCRStg:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            # RestApiId: !Ref StgApi
            # Auth:
            #   Authorizer: StgCognitoAuthorizer

  StgApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: StgApi
      StageName: !Ref Stage
      # Auth:
      #   Authorizers:
      #     StgCognitoAuthorizer:
      #       UserPoolArn: !GetAtt OCRStageUserPool.Arn
      #       Identity:
      #         Header: Authorization

  OCRLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OCRFunctionStg}"
      RetentionInDays: 5

  ConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: OCRFunctionStg
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OCRFunctionStg
      Principal: apigateway.amazonaws.com

  ApiGwAccountConfig: 
    Type: "AWS::ApiGateway::Account"
    Properties: 
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"

  ApiGatewayLoggingRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs' 

Outputs:
  OCRStgApi:
    Description: API Gateway endpoint URL for stage for OCR function
    Value: !Sub "https://${StgApi}.execute-api.${AWS::Region}.amazonaws.com/ocr/organizations"
  OCRFunction:
    Description: OCR Lambda Function ARN
    Value: !GetAtt OCRFunctionStg.Arn
  OCRFunctionIamRole:
    Description: Implicit IAM Role created for OCR function
    Value: !GetAtt LambdaExecutionRole.Arn
  OCRCustomDomain:
    Description: Custom domain URL for Cognito user pool
    Value: !Sub "https://${CustomDomain}.auth.${AWS::Region}.amazoncognito.com"
